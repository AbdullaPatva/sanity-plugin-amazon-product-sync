{"version":3,"file":"index.js","sources":["../src/inputs/AmazonSettingsActions.tsx","../src/schemas/amazonSettings.ts","../src/schemas/amazonProduct.ts","../src/schemas/amazonAsin.ts","../src/schemas/amazonProductBlock.ts","../src/inputs/AmazonFetchButton.tsx","../src/schemas/amazonFetchButton.ts","../src/inputs/AmazonAsinInput.tsx","../src/index.ts"],"sourcesContent":["import * as React from 'react'\nimport {useState, useEffect} from 'react'\nimport {Button, Card, Flex, Stack, Text, useToast} from '@sanity/ui'\nimport type {InputProps} from 'sanity'\nimport {useClient} from 'sanity'\n\nexport type SettingsActionsInputProps = InputProps & {\n  // document is available on props in Studio; typing as any for plugin portability\n  document?: any\n}\n\nexport function AmazonSettingsActions(props: SettingsActionsInputProps) {\n  const {schemaType, document} = props as any\n  const toast = useToast()\n  const [loading, setLoading] = useState(false)\n  const client = useClient({apiVersion: '2025-01-01'})\n  \n  // State to store the fetched document data\n  const [documentData, setDocumentData] = useState<any>({})\n  const [isLoadingData, setIsLoadingData] = useState(true)\n\n  // Fetch the current document data using the Sanity client\n  useEffect(() => {\n    const fetchDocumentData = async () => {\n      try {\n        // Get the current document ID from the URL\n        const currentPath = window.location.pathname\n        // Extract document ID from URL like /desk/amazon.settings;amazon-settings\n        const pathParts = currentPath.split(';')\n        let documentId = 'amazon-settings' // default singleton ID\n        \n        if (pathParts.length > 1) {\n          documentId = pathParts[1]\n        }\n        \n        // Fetch the document data\n        const query = `*[_type == \"amazon.settings\" && _id == $id][0]{\n          region,\n          accessKey,\n          secretKey,\n          partnerTag,\n          asinNumber,\n          cacheHours\n        }`\n        \n        const data = await client.fetch(query, {id: documentId})\n        \n        if (data) {\n          setDocumentData(data)\n        }\n      } catch {\n        // Silently handle errors\n      } finally {\n        setIsLoadingData(false)\n      }\n    }\n\n    fetchDocumentData()\n  }, [client])\n\n\n\n  const asinNumber: string | undefined = documentData?.asinNumber\n  const hasCredentials = documentData?.accessKey && documentData?.secretKey && documentData?.partnerTag\n\n\n\n  return (\n    <Card padding={3} tone=\"primary\" radius={2} shadow={1}>\n      <Stack space={3}>\n        <Text size={1} muted>{schemaType.title || 'Actions'}</Text>\n        <Flex gap={2}>\n          <Button\n            text=\"Test API Connection\"\n            tone=\"positive\"\n            disabled={isLoadingData || loading}\n            onClick={async () => {\n              if (!documentData?.accessKey || !documentData?.secretKey || !documentData?.partnerTag || !documentData?.asinNumber) {\n                toast.push({\n                  status: 'warning',\n                  title: 'Missing Credentials',\n                  description: 'Please fill in all required fields first'\n                })\n                return\n              }\n              \n              setLoading(true)\n              try {\n                const response = await fetch('http://localhost:3001/api/amazon/test-connection', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({\n                    testAsin: documentData.asinNumber\n                  })\n                })\n\n                if (!response.ok) {\n                  const errorData = await response.json().catch(() => ({}))\n                  throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`)\n                }\n\n                const result = await response.json()\n                \n                if (result.success) {\n                  toast.push({\n                    status: 'success',\n                    title: 'Amazon API Test Successful!',\n                    description: `Successfully fetched: ${result.testProduct.title}`\n                  })\n                } else {\n                  throw new Error(result.error || 'API test failed')\n                }\n              } catch (error: any) {\n                toast.push({\n                  status: 'error',\n                  title: 'API Test Failed',\n                  description: error?.message || 'Unknown error occurred'\n                })\n              } finally {\n                setLoading(false)\n              }\n            }}\n          />\n          \n          <Button\n            text=\"Debug Document\"\n            tone=\"caution\"\n            disabled={isLoadingData}\n            onClick={() => {\n              console.log('=== DEBUG DOCUMENT STATE ===')\n              console.log('Document:', document)\n              console.log('DocumentData:', documentData)\n              console.log('Has Credentials:', hasCredentials)\n              console.log('ASIN Number:', asinNumber)\n              console.log('Is Loading Data:', isLoadingData)\n              console.log('Current URL:', window.location.pathname)\n              console.log('========================')\n              \n              toast.push({\n                status: 'info',\n                title: 'Document State Logged',\n                description: 'Check browser console for detailed document information'\n              })\n            }}\n          />\n        </Flex>\n        <Text size={1} muted>\n          {isLoadingData \n            ? 'Loading document data...'\n            : !hasCredentials \n            ? 'Fill in API credentials first, then provide a test ASIN to test the connection.'\n            : !asinNumber \n            ? 'Provide a test ASIN number to test the API connection.'\n            : 'Use these buttons to test your API credentials and debug document state.'\n          }\n        </Text>\n        \n        {isLoadingData && (\n          <Text size={1} muted>\n            ⏳ Loading document data from Sanity...\n          </Text>\n        )}\n        \n        {!isLoadingData && hasCredentials && asinNumber && (\n          <Text size={1} muted>\n            ✅ Ready to test API connection with {documentData.region || 'com'} region\n          </Text>\n        )}\n      </Stack>\n    </Card>\n  )\n}","import {defineType, defineField} from 'sanity'\nimport {AmazonSettingsActions} from '../inputs/AmazonSettingsActions'\n\nexport const amazonSettingsSchema = defineType({\n  name: 'amazon.settings',\n  title: 'Amazon Settings',\n  type: 'document',\n  groups: [\n    { name: 'api', title: 'API Configuration' },\n    { name: 'display', title: 'Display Settings' },\n    { name: 'actions', title: 'Actions' },\n  ],\n  fields: [\n    defineField({\n      name: 'region',\n      title: 'Amazon Region',\n      type: 'string',\n      group: 'api',\n      options: {\n        list: [\n          {title: 'US (default)', value: 'com'},\n          {title: 'Australia', value: 'com.au'},\n          {title: 'Belgium', value: 'com.be'},\n          {title: 'Brazil', value: 'com.br'},\n          {title: 'Canada', value: 'ca'},\n          {title: 'Egypt', value: 'eg'},\n          {title: 'France', value: 'fr'},\n          {title: 'Germany', value: 'de'},\n          {title: 'India', value: 'in'},\n          {title: 'Italy', value: 'it'},\n          {title: 'Japan', value: 'co.jp'},\n          {title: 'Mexico', value: 'com.mx'},\n          {title: 'Netherlands', value: 'nl'},\n          {title: 'Poland', value: 'pl'},\n          {title: 'Singapore', value: 'sg'},\n          {title: 'Saudi Arabia', value: 'sa'},\n          {title: 'Spain', value: 'es'},\n          {title: 'Sweden', value: 'se'},\n          {title: 'Turkey', value: 'com.tr'},\n          {title: 'United Arab Emirates', value: 'ae'},\n          {title: 'United Kingdom', value: 'co.uk'}\n        ],\n      },\n      initialValue: 'com',\n      validation: (r: any) => r.required(),\n    }),\n    defineField({\n      name: 'accessKey',\n      title: 'PA-API Access Key',\n      type: 'string',\n      group: 'api',\n      description: 'Enter your Amazon API Access Key to authenticate API requests.',\n      validation: (r: any) => r.required(),\n    }),\n    defineField({\n      name: 'secretKey',\n      title: 'PA-API Secret Key',\n      type: 'string',\n      group: 'api',\n      description: 'Enter your Amazon API Secret Key for secure access to the API.',\n      validation: (r: any) => r.required(),\n    }),\n    defineField({\n      name: 'partnerTag',\n      title: 'Associate Tag (Partner Tag)',\n      type: 'string',\n      group: 'api',\n      description: 'Enter your Amazon Partner Tag for tracking and attribution in the affiliate program.',\n      validation: (r: any) => r.required(),\n    }),\n    defineField({\n      name: 'asinNumber',\n      title: 'Enter random ASIN Number',\n      type: 'string',\n      group: 'api',\n      description: 'From Amazon product\\'s page add ASIN number of any product for testing API connection.',\n      validation: (r: any) => r.required(),\n    }),\n    defineField({\n      name: 'cacheHours',\n      title: 'Cache Duration (hours)',\n      type: 'number',\n      group: 'api',\n      initialValue: 24,\n      validation: (r: any) => r.min(1).max(168),\n    }),\n    // Field Display Settings\n    defineField({\n      name: 'showProductTitle',\n      title: 'Show Product Title',\n      type: 'boolean',\n      group: 'display',\n      initialValue: true,\n    }),\n    defineField({\n      name: 'showProductImage',\n      title: 'Show Product Image',\n      type: 'boolean',\n      group: 'display',\n      initialValue: true,\n    }),\n    defineField({\n      name: 'showProductFeatures',\n      title: 'Show Product Features',\n      type: 'boolean',\n      group: 'display',\n      initialValue: true,\n    }),\n    defineField({\n      name: 'showProductPrice',\n      title: 'Show Product Price',\n      type: 'boolean',\n      group: 'display',\n      initialValue: true,\n    }),\n    defineField({\n      name: 'showCtaLink',\n      title: 'Show CTA Link',\n      type: 'boolean',\n      group: 'display',\n      initialValue: true,\n    }),\n\n    // Actions (modern: dedicated field component)\n    defineField({\n      name: 'settingsActions',\n      title: 'Actions',\n      type: 'string',\n      group: 'actions',\n      components: {\n        input: AmazonSettingsActions,\n      },\n    }),\n  ],\n  preview: {\n    prepare: () => ({\n      title: 'Amazon Settings',\n    }),\n  },\n})\n\n","import { defineType, defineField, defineArrayMember } from 'sanity'\n\nexport const amazonProductSchema = defineType({\n  name: 'amazon.product',\n  title: 'Amazon Products',\n  type: 'document',\n  fields: [\n    defineField({\n      name: 'asin',\n      title: 'ASIN',\n      type: 'amazon.asin',\n      validation: (r: any) => r.required(),\n    }),\n    defineField({\n      name: 'fetchButton',\n      title: 'Fetch from Amazon',\n      type: 'amazonFetchButton',\n    }),\n    defineField({\n      name: 'title',\n      title: 'Title',\n      type: 'string',\n    }),\n    defineField({\n      name: 'url',\n      title: 'Product URL',\n      type: 'url',\n    }),\n    defineField({\n      name: 'brand',\n      title: 'Brand',\n      type: 'string',\n    }),\n    defineField({\n      name: 'features',\n      title: 'Features',\n      type: 'array',\n      of: [defineArrayMember({ type: 'string' })],\n    }),\n    defineField({\n      name: 'price',\n      title: 'Price (display)',\n      type: 'string',\n    }),\n    defineField({\n      name: 'salePrice',\n      title: 'Sale Price (display)',\n      type: 'string',\n    }),\n    defineField({\n      name: 'currency',\n      title: 'Currency',\n      type: 'string',\n    }),\n    defineField({\n      name: 'listPrice',\n      title: 'List Price (display)',\n      type: 'string',\n    }),\n    defineField({\n      name: 'images',\n      title: 'Images',\n      type: 'array',\n      of: [\n        defineArrayMember({\n          type: 'object',\n          fields: [\n            { name: 'url', title: 'URL', type: 'url' },\n            { name: 'width', title: 'Width', type: 'number' },\n            { name: 'height', title: 'Height', type: 'number' },\n          ],\n        }),\n      ],\n    }),\n    defineField({\n      name: 'lastSyncedAt',\n      title: 'Last Synced At',\n      type: 'datetime',\n      readOnly: true,\n    }),\n  ],\n})\n\n","import {defineType} from 'sanity'\n\n// String alias with custom input rendered by form.renderInput\nexport const amazonAsinType = defineType({\n  name: 'amazon.asin',\n  title: 'ASIN',\n  type: 'string',\n})\n\n","import {defineType, defineField} from 'sanity'\n\nexport const amazonProductBlock = defineType({\n  name: 'amazon.productBlock',\n  title: 'Amazon Product',\n  type: 'object',\n  fields: [\n    defineField({\n      name: 'product',\n      title: 'Product',\n      type: 'reference',\n      to: [{type: 'amazon.product'}],\n      validation: (r: any) => r.required(),\n    }),\n    defineField({\n      name: 'showPrice',\n      title: 'Show price',\n      type: 'boolean',\n      initialValue: true,\n    }),\n  ],\n  preview: {\n    select: {title: 'product.title', subtitle: 'product.asin'},\n    prepare: ({title, subtitle}: {title: any; subtitle: any}) => ({title: title || 'Amazon Product', subtitle}),\n  },\n})\n\n","import * as React from 'react'\nimport { useCallback, useState } from 'react'\nimport { Button, Card, Flex, Stack, Text, useToast } from '@sanity/ui'\nimport type { InputProps } from 'sanity'\nimport { useClient, useFormValue } from 'sanity'\n\nexport type AmazonFetchButtonInputProps = InputProps & {\n  document?: any\n}\n\nexport function AmazonFetchButton(props: AmazonFetchButtonInputProps) {\n  const { schemaType, parent } = props as any\n  const toast = useToast()\n  const [loading, setLoading] = useState(false)\n  const client = useClient({ apiVersion: '2025-01-01' })\n\n  // State to store Amazon settings\n  const [amazonSettings, setAmazonSettings] = useState<any>(null)\n  const [isLoadingSettings, setIsLoadingSettings] = useState(true)\n\n  // Fetch Amazon settings using GROQ\n  React.useEffect(() => {\n    const fetchAmazonSettings = async () => {\n      try {\n        const query = `*[_type == \"amazon.settings\"][0]{\n          accessKey,\n          secretKey,\n          region,\n          partnerTag\n        }`\n        \n        const settings = await client.fetch(query)\n        setAmazonSettings(settings)\n      } catch (error) {\n        console.error('Error fetching Amazon settings:', error)\n      } finally {\n        setIsLoadingSettings(false)\n      }\n    }\n\n    fetchAmazonSettings()\n  }, [client])\n\n  // Get ASIN value from the form context\n  const asinValue = useFormValue(['asin']) as string || ''\n\n  const handleFetchFromAmazon = useCallback(async () => {\n    if (!asinValue) {\n      toast.push({\n        status: 'warning',\n        title: 'ASIN Required',\n        description: 'Please enter an ASIN number first'\n      })\n      return\n    }\n\n    if (!amazonSettings?.accessKey || !amazonSettings?.secretKey || !amazonSettings?.partnerTag) {\n      toast.push({\n        status: 'warning',\n        title: 'Missing Amazon Settings',\n        description: 'Please configure Amazon API credentials first'\n      })\n      return\n    }\n\n    // Get document ID from parent context or URL\n    let documentId = null\n    if (parent?._id) {\n      documentId = parent._id\n    } else {\n      // Fallback to URL parsing\n      const currentPath = window.location.pathname\n      const pathParts = currentPath.split(';')\n      if (pathParts.length > 1) {\n        const encodedId = pathParts[1]\n        const decodedId = decodeURIComponent(encodedId)\n        documentId = decodedId.split(',')[0]\n      }\n    }\n    \n    if (!documentId) {\n      toast.push({\n        status: 'error',\n        title: 'Document Not Found',\n        description: 'Cannot update document - document ID not available. Please save the document first.'\n      })\n      return\n    }\n\n    setLoading(true)\n    try {\n      const response = await fetch('http://localhost:3001/api/amazon/fetch-product', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ asin: asinValue })\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}))\n        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`)\n      }\n\n      const result = await response.json()\n      \n      if (result.success) {\n        const updateData = {\n          title: result.product.title,\n          brand: result.product.brand,\n          price: result.product.price,\n          salePrice: result.product.salePrice,\n          currency: result.product.currency,\n          listPrice: result.product.listPrice,\n          url: result.product.url,\n          features: result.product.features,\n          images: result.product.images,\n          lastSyncedAt: result.product.lastSyncedAt\n        }\n\n        await client.patch(documentId).set(updateData).commit()\n\n        toast.push({\n          status: 'success',\n          title: 'Product Fetched Successfully!',\n          description: `Fetched: ${result.product.title}`\n        })\n      } else {\n        throw new Error(result.error || 'Failed to fetch product data')\n      }\n    } catch (error: any) {\n      toast.push({\n        status: 'error',\n        title: 'Fetch Failed',\n        description: error?.message || 'Unknown error occurred'\n      })\n    } finally {\n      setLoading(false)\n    }\n  }, [asinValue, amazonSettings, client, toast, parent])\n\n  return (\n    <Card padding={3} tone=\"primary\" radius={2} shadow={1}>\n      <Stack space={3}>\n        <Text size={1} muted>{schemaType.title || 'Fetch from Amazon'}</Text>\n        \n        \n        <Flex gap={2}>\n          <Button\n            text=\"Fetch from Amazon\"\n            tone=\"positive\"\n            disabled={!asinValue || loading || isLoadingSettings}\n            onClick={handleFetchFromAmazon}\n            loading={loading}\n          />\n        </Flex>\n        \n        <Text size={1} muted>\n          {isLoadingSettings \n            ? 'Loading Amazon settings...'\n            : !amazonSettings?.accessKey \n            ? 'Please configure Amazon API credentials first'\n            : !asinValue \n            ? 'Enter an ASIN number above, then click \"Fetch from Amazon\" to automatically populate product details.'\n            : loading\n            ? 'Fetching product data from Amazon...'\n            : `Ready to fetch product data for ASIN: ${asinValue}`\n          }\n        </Text>\n        \n        {asinValue && !loading && !isLoadingSettings && (\n          <Text size={1} muted>\n            ✅ ASIN entered: {asinValue}\n          </Text>\n        )}\n      </Stack>\n    </Card>\n  )\n} ","import { defineType } from 'sanity'\nimport { AmazonFetchButton } from '../inputs/AmazonFetchButton'\n\nexport const amazonFetchButtonSchema = defineType({\n  name: 'amazonFetchButton',\n  title: 'Amazon Fetch Button',\n  type: 'string',\n  readOnly: true,\n  components: {\n    input: AmazonFetchButton,\n  },\n}) ","import * as React from 'react'\nimport { useCallback, useState, useEffect } from 'react'\nimport { Button, Card, Flex, Stack, Text, useToast, TextInput, Box } from '@sanity/ui'\nimport type { InputProps } from 'sanity'\nimport { useClient, set } from 'sanity'\n\nexport type AmazonAsinInputProps = InputProps & {\n  document?: any\n}\n\nexport function AmazonAsinInput(props: AmazonAsinInputProps) {\n  const { schemaType, document, value, onChange } = props as any\n  const toast = useToast()\n  const [loading, setLoading] = useState(false)\n  const client = useClient({ apiVersion: '2025-01-01' })\n\n  // Debug: Log all props and values\n  useEffect(() => {\n    console.log('🔍 AmazonAsinInput Debug Info:')\n    console.log('Props:', props)\n    console.log('Value:', value)\n    console.log('Document:', document)\n    console.log('Document ASIN:', document?.asin)\n    console.log('OnChange function:', onChange)\n  }, [props, value, document, onChange])\n\n  const handleInputChange = (next: string) => {\n    const trimmed = next ?? ''\n    console.log('🔍 ASIN Input Change:', { next, trimmed })\n    onChange(set(trimmed))\n  }\n\n  const handleFetchFromAmazon = useCallback(async () => {\n    if (!value) {\n      toast.push({\n        status: 'warning',\n        title: 'ASIN Required',\n        description: 'Please enter an ASIN number first'\n      })\n      return\n    }\n\n    setLoading(true)\n    try {\n      // Call the user's frontend API endpoint\n      const response = await fetch('http://localhost:3001/api/amazon/fetch-product', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          asin: value\n        })\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}))\n        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`)\n      }\n\n      const result = await response.json()\n      \n      if (result.success) {\n        // Update the document with fetched data\n        const updateData = {\n          title: result.product.title,\n          brand: result.product.brand,\n          price: result.product.price,\n          salePrice: result.product.salePrice,\n          currency: result.product.currency,\n          listPrice: result.product.listPrice,\n          url: result.product.url,\n          features: result.product.features,\n          images: result.product.images,\n          lastSyncedAt: result.product.lastSyncedAt\n        }\n\n        // Use Sanity client to update the document\n        await client.patch(document._id).set(updateData).commit()\n\n        toast.push({\n          status: 'success',\n          title: 'Product Fetched Successfully!',\n          description: `Fetched: ${result.product.title}`\n        })\n      } else {\n        throw new Error(result.error || 'Failed to fetch product data')\n      }\n    } catch (error: any) {\n      toast.push({\n        status: 'error',\n        title: 'Fetch Failed',\n        description: error?.message || 'Unknown error occurred'\n      })\n    } finally {\n      setLoading(false)\n    }\n  }, [value, client, toast, document])\n\n  return (\n    <Stack space={3}>\n      {/* Debug info display */}\n      <Card padding={2} tone=\"caution\" radius={1}>\n        <Stack space={2}>\n          <Text size={0} weight=\"semibold\">🔍 ASIN Input Debug:</Text>\n          <Text size={0}>Current Value: {value || 'EMPTY'}</Text>\n          <Text size={0}>Document ASIN: {JSON.stringify(document?.asin)}</Text>\n          <Text size={0}>OnChange Type: {typeof onChange}</Text>\n        </Stack>\n      </Card>\n\n      {/* Default ASIN input */}\n      <Box>\n        <label style={{ display: 'block', marginBottom: '8px', fontWeight: 'bold' }}>\n          {schemaType.title || 'ASIN'}\n        </label>\n        <TextInput\n          value={value || ''}\n          onChange={(e) => handleInputChange(e.currentTarget.value)}\n          placeholder=\"Enter Amazon ASIN (e.g., B0F15TM77B)\"\n        />\n      </Box>\n\n      {/* Fetch from Amazon button (convenience) */}\n      {value && (\n        <Card padding={3} tone=\"primary\" radius={2} shadow={1}>\n          <Stack space={3}>\n            <Text size={1} muted>Fetch Product Details</Text>\n            \n            <Flex gap={2}>\n              <Button\n                text=\"Fetch from Amazon\"\n                tone=\"positive\"\n                disabled={loading}\n                onClick={handleFetchFromAmazon}\n                loading={loading}\n              />\n            </Flex>\n            \n            <Text size={1} muted>\n              {loading \n                ? 'Fetching product data from Amazon...'\n                : `Ready to fetch product data for ASIN: ${value}`\n              }\n            </Text>\n          </Stack>\n        </Card>\n      )}\n    </Stack>\n  )\n}\n\n","import {definePlugin} from 'sanity'\nimport {amazonSettingsSchema} from './schemas/amazonSettings'\nimport {amazonProductSchema} from './schemas/amazonProduct'\nimport {amazonAsinType} from './schemas/amazonAsin'\nimport {amazonProductBlock} from './schemas/amazonProductBlock'\nimport {amazonFetchButtonSchema} from './schemas/amazonFetchButton'\nimport {AmazonAsinInput} from './inputs/AmazonAsinInput'\n\n\n/**\n * Configuration options for the Amazon Products plugin\n * @public\n */\nexport interface AmazonPluginOptions {\n  // Optional: override tool name or route\n  toolName?: string\n}\n\n/**\n * Sanity Studio plugin for fetching and managing Amazon products\n * @public\n */\nexport const amazonProductsPlugin = definePlugin<AmazonPluginOptions | void>((opts: AmazonPluginOptions | void) => {\n  const toolName = opts?.toolName ?? 'amazon'\n  return {\n    name: 'sanity-plugin-amazon-products',\n    schema: {\n      types: [amazonSettingsSchema, amazonProductSchema, amazonAsinType, amazonProductBlock, amazonFetchButtonSchema],\n    },\n    form: {\n      renderInput(props: any, next: any) {\n        if (props.schemaType.name === 'amazon.asin') {\n          return AmazonAsinInput(props)\n        }\n        // amazonFetchButton is handled by components.input in its schema\n        return next(props)\n      },\n    },\n  }\n})\n\nexport default amazonProductsPlugin\n\n"],"names":[],"mappings":"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"}